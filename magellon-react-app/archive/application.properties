server.port = 443
#server.address=0.0.0.0
#server.address=135.181.100.198
com.genufusion.phaeton.domainurl=https://api.phaiton.com
com.genufusion.phaeton.assetsurl=https://api.phaiton.com/assets/

com.genufusion.phaeton.mqtt-admin= 67073232f87d1
com.genufusion.phaeton.mqtt-password= MzAwMDE1ODM3NzE1NDQ1OTA3OTM5OTQ3NDk5OTg2NjE2MzC

#logging.file=/tmp/filebeatDemoApp.log
#logging.level.root=debug
logging.level.org.springframework.web= DEBUG
logging.level.com.concretepage= INFO
logging.level.com.genufusion.phaeton = DEBUG
#logging.pattern.console= "{\"time\": \"%d\", \"level\": \"%p\", \"correlation-id\": \"%X{X-Correlation-Id}\", \"source\": \"%logger{63}:%L\", \"message\": \"%replace(%m%wEx{6}){'[\r\n]+', '\\n'}%nopex\"}%n"


#=============================== Quote =====================================================
com.genufusion.phaeton.rides.quote.entrance_fee= 5000
com.genufusion.phaeton.rides.quote.cost_per_aerial_km= 2500
com.genufusion.phaeton.rides.quote.cost_per_km= 2200
com.genufusion.phaeton.rides.quote.cost_per_min= 450
com.genufusion.phaeton.rides.quote.min_value= 12000

com.genufusion.phaeton.rides.quote.formula=  iff( DKM<5000, 2000; DKM>=5000 && DKM <10000, 1300; DKM>=10000, 1150 )

#=========================== Discovery =====================================================
com.genufusion.phaeton.rides.discovering_radius= 3.0




spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER
sentry.dsn=https://4b99590f2efd48fcb6cb351010b01df2@o407153.ingest.sentry.io/5437825

springdoc.pathsToMatch=/v1, /api/balance/**
springdoc.api-docs.path=docs/api-docs
springdoc.swagger-ui.path=docs/phaiton-swagger-ui.html

#======================================== SSL Support ===========================
#https://stackoverflow.com/questions/36991562/how-can-i-set-up-a-letsencrypt-ssl-certificate-and-use-it-in-a-spring-boot-appli
security.require-ssl=true
server.ssl.key-store=/var/www/keys/keystore.p12
server.ssl.key-store-password=behdad2328
server.ssl.keyStoreType=PKCS12
server.ssl.keyAlias=tomcat
#========================================MongoDB Configuration ===========================
spring.data.mongodb.uri = mongodb://behdad:Behdad2328@127.0.0.1:27017/?serverSelectionTimeoutMS=5000&connectTimeoutMS=10000&authSource=phaiton&authMechanism=SCRAM-SHA-256
spring.data.mongodb.database=phaiton

#Cloudinary configuration==================================================================
cloudinary.cloud_name=eadepardazan
cloudinary.api_key=958516497315511
cloudinary.api_secret=dmSD48JpMPmuLTkyqfty3aoKS70
#========================================Database Configuration ===========================
#spring.datasource.url=jdbc:mysql://185.128.139.187/phaeton23?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&characterSetResults=UTF-8

spring.datasource.url=jdbc:mysql://185.170.8.17/phaeton02?useSSL=true&useUnicode=yes&characterEncoding=UTF-8&characterSetResults=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Tehran
spring.datasource.username=behdad
spring.datasource.password=Behdad#2328

#spring.datasource.url=jdbc:mysql://127.0.0.1/phaeton22?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&characterSetResults=UTF-8
#spring.datasource.username=root
#spring.datasource.password=behd1d2
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=false
#spring.main.allow-bean-definition-overriding= true
## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

spring.jpa.properties.hibernate.dialect = org.hibernate.spatial.dialect.mysql.MySQL56InnoDBSpatialDialect

#https://stackoverflow.com/questions/52656517/no-serializer-found-for-class-org-hibernate-proxy-pojo-bytebuddy-bytebuddyinterc
spring.jackson.serialization.fail-on-empty-beans=false
#https://aboullaite.me/spring-boot-arabic-characters-mysql/
spring.jpa.properties.hibernate.connection.characterEncoding=utf-8
spring.jpa.properties.hibernate.connection.CharSet=utf-8
spring.jpa.properties.hibernate.connection.useUnicode=true
#spring.jackson.serialization.fail-on-empty-beans=false


# logs the SQL statements
#log4j.logger.org.hibernate.SQL=debug

# Logs the JDBC parameters passed to a query
#log4j.logger.org.hibernate.type=trace

#======================================== Sms  ===========================================
Communication.Sms.Asanak.SMSUserName=fytonapi
Communication.Sms.Asanak.SMSPassword=befad32hdad25
Communication.Sms.Asanak.SMSSource=02188563225
#======================================== CloudKarafka  ====================================
##CLOUDKARAFKA_BROKERS=fyton-benjamin-e3c8.aivencloud.com:24734
##CLOUDKARAFKA_USERNAME = avnadmin
##CLOUDKARAFKA_PASSWORD = co0vr996mtw5voll
##CLOUDKARAFKA_TOPIC_PREFIX=
#
#
#CLOUDKARAFKA_BROKERS=velomobile-01.srvs.cloudkafka.com:9094
#CLOUDKARAFKA_USERNAME = d0zc04ix
#CLOUDKARAFKA_PASSWORD = NJNNMfArDR47mnwbfEzD5hCKzSOMdLoL
#CLOUDKARAFKA_TOPIC_PREFIX=d0zc04ix-
#
#
##spring.kafka.properties.sasl.mechanism=PLAIN
##spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${CLOUDKARAFKA_USERNAME}" password="${CLOUDKARAFKA_PASSWORD}";
#spring.kafka.bootstrap-servers=${CLOUDKARAFKA_BROKERS}
#spring.kafka.properties.security.protocol=SASL_SSL
#spring.kafka.properties.ssl.endpoint.identification.algorithm =
#spring.kafka.properties.ssl.truststore.location =client.truststore.jks
#spring.kafka.properties.ssl.truststore.password = behd1d2
#spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="${CLOUDKARAFKA_USERNAME}" password="${CLOUDKARAFKA_PASSWORD}";
#spring.kafka.properties.sasl.mechanism=SCRAM-SHA-256
#spring.kafka.consumer.group-id=${CLOUDKARAFKA_USERNAME}-consumer
#
#spring.kafka.consumer.auto-offset-reset=latest
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=com.genufusion.phaeton
#
#com.phaeton.kafka.topics.rideestimaterequest =d0zc04ix-topRideEstimateRequest
com.phaeton.kafka.topics.rideestimaterequest =topRideEstimateRequest

spring.kafka.bootstrap-servers=78.47.42.30:9092



#======================================== Email ===========================================
# Postfix qmail Exim  James
spring.sendgrid.api-key= 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
#spring.sendgrid.username= # SendGrid account username.
#spring.sendgrid.password= # SendGrid account password.
#spring.sendgrid.proxy.host= # SendGrid proxy host. (optional)
#spring.sendgrid.proxy.port= # SendGrid proxy port. (optional)



spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=<login user to smtp server>
spring.mail.password=<login password to smtp server>
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#Amazon SES Service
#spring.mail.host=email-smtp.us-west-2.amazonaws.com
#spring.mail.username=username
#spring.mail.password=password
#spring.mail.properties.mail.transport.protocol=smtp
#spring.mail.properties.mail.smtp.port=25
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true
#======================================== JWT ===========================================
#jwt.secret=javainuse
# This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
# As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
# - In the JHipster Registry (which includes a Spring Cloud Config server)
# - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
# - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
com.genufusion.phaeton.security.authentication.jwt.base64-secret: YmU0ZTZiNmMyZmI5YmI1MjRhNTMwMzYyMjhlMmUxMDVjYmM1MjA1MDAyMzczNWNmMTIxNGM1NjNiYWFhODAyMTg0NTNiNzc4YmNlNjY3N2Q2ZGVkNGUxNDI4NjkyMzJkZGQ5Njk2YmFmOTk1NjE4OTE5ZDFiNzVjMGNkZjQzMDY=
com.genufusion.phaeton.security.estimate.jwt.base64-secret: r9duQYOU3tFmORwtcIlCCy1tx+xm1K+1RVAXr2CmX5g5JGBBD8PQm6vKROPKd3ns4Wp0/if+jOetUxPlR2xV+Q==
com.genufusion.phaeton.security.authentication.jwt.secret= PhaetonB20196Behd1d2PhaetonB2R0186PhaetonB20197Behd1d2PhaetonR2R0186Behd1d2PhaetonB20196Behd1d2PhaetonB2R0186PhaetonB20197Behd1d2PhaetonR2R0186Behd1d2
com.genufusion.phaeton.jwt.secret=
com.genufusion.phaeton.jwt.issuer= https://www.phaiton.com
com.genufusion.phaeton.security.authentication.jwt.token-validity-in-seconds:25920000
com.genufusion.phaeton.security.authentication.jwt.token-validity-in-seconds-for-remember-me: 25920000
#======================================== Uploading ===========================================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=228KB
spring.servlet.multipart.max-request-size=228KB
#spring.servlet.multipart.location=${java.io.tmpdir}

#======================================== Regex ===========================================


#======================================== Thymleaf ===========================================
spring.thymeleaf.cache=false
spring.thymeleaf.enabled=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html


log4j.logger.org.thymeleaf=DEBUG
log4j.logger.org.thymeleaf.TemplateEngine.CONFIG=DEBUG
log4j.logger.org.thymeleaf.TemplateEngine.TIMER=DEBUG
log4j.logger.org.thymeleaf.TemplateEngine.cache.TEMPLATE_CACHE=DEBUG
log4j.logger.org.thymeleaf.TemplateEngine.cache.FRAGMENT_CACHE=DEBUG
log4j.logger.org.thymeleaf.TemplateEngine.cache.MESSAGE_CACHE=DEBUG
log4j.logger.org.thymeleaf.TemplateEngine.cache.EXPRESSION_CACHE=DEBUG